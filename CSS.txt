2018/1/31
1.CSS概述
  1.什么是CSS？
    CSS：Cascading Style Sheets
         层叠样式表，级联样式表，简称样式表
  2.CSS的作用
    设置HTML网页元素的样式（修饰元素）
  3.CSS与HTML的关系
    HTML：构建网页的结构（内容的体现）
    CSS： 构建网页元素的样式（修饰内容）
  4.CSS与HTML之间的使用原则
    W3C建议尽量使用CSS的属性去取代HTML的属性
2.CSS的基础语法
  1.使用CSS样式的方式
    1.内联样式
      又称为“行内样式”
      特点：将CSS样式定义在HTML开始标记中
      语法：
         <ANY style="样式声明1;样式声明2;..."></ANY>
	 样式声明：
	   1.由样式 属性名称 和 值 组成
	   2.属性名称与值之间用冒号连接
	   3.多个样式声明之间用分号分割
	 常用的样式属性和值
	   1.设置文本颜色的属性和值
	     属性：color
	     值：合法的颜色值
	   2.设置文字大小的属性和值
	     属性：font-size
	     值：以px或pt为单位的数字
	   3.设置背景颜色的属性和值
	     属性：background
	     值：合法的颜色值
    2.内部样式
      在网页的头元素中增加一对<style>标记，在<style>标记中声明该网页的样式
      语法：<head>
		<style>
		  样式规则1
		  样式规则2
		  样式规则3
		  ...
		</style>
	    </head>
	样式规则：由选择器和样式声明组成
	选择器：规范了页面中哪些元素能够使用声明好的样式，其实就是把声明好的样式匹配给页面中的元素
	1.元素选择器：由元素的名称作为选择器
	  语法：选择器{
		   样式声明1;
		   样式声明2;
		   样式声明3;
		   ...
		}
    3.外部样式
      独立与任何网页的位置处，声明一个样式表文件（.css为后缀），在.css文件中保存样式规则
      使用步骤：
         1.创建样式表文件
	 2.在样式表文件中编写样式规则
	 3.在网页中引用样式表文件
	 <head>
	   <link rel="stylesheet" href="xx.css">
	 </head>
  2.CSS的样式特征
    1.继承性
      必须是父子（有层级关系）结构
      大部分的css样式是可以被直接继承（子继父承）
    2.层叠性
      可以为一个元素定义多个样式规则，规则中的属性不冲突时，可以同时都应用到当前元素上
    3.优先级
      如果样式声明冲突（重复）时，则会按照默认的优先级应用样式
        由低到高：
         浏览器默认设置        低
	 内部样式和外部样式    中（就近原则）
	 内联方式              高
    4.调整优先级
      !important原则
      调整显示的优先级,!important放在属性值之后，并且与值之间用空格隔开。
      样式属性:值 !important;
  3.CSS基础选择器
    1.选择器的作用
      规范了页面中哪些元素能够使用声明好的样式，为了匹配页面的元素
    2.选择器详解
      1.通用选择器
        作用：可以与页面中的任意元素相匹配
	语法：*{样式声明}
	效率较低，尽量少用
      2.元素选择器
        作用：设置页面上某种（类）元素的样式
	语法：元素名称{样式声明}
      3.类选择器
        作用：定义页面上某个或某些元素的样式（一个公共的样式，都可以引用）
	特点：通过元素的class属性进行引用
	语法：
	  1.声明
	    .类名{样式声明}
	    自定义类名注意：
	       1.点 不能省略
	       2.类名不能以数字开头
	       3.不能包含特殊字符（可以包含_,-）
	  2.引用
	    <ANY class="类名"></ANY>
	类选择器特殊用法：
	  1.多类选择器的引用方式
	    让元素引用多个类选择器,中间空格隔开
	    语法：<ANY class="类名1 类名2...">
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2018/2/1
1.基础选择器
  1.类选择器
    特殊用法：分类选择器
    将元素选择器和类选择器联合使用
    语法：元素名称.类选择器{样式声明}
  2.id选择器
    作用：设置指定id元素的样式（专属定制）
    语法：#id值{样式声明}
  3.群组选择器
    作用：将多个选择器放到一起进行样式的声明定义
    语法：选择器1,选择器2,...{样式声明}
  4.后代选择器
    作用：通过元素的后代关系匹配元素
    后代：一级或多于一级的嵌套
    语法：选择器1 选择器2 ...{样式声明}
  5.子代选择器
    作用：通过元素的子代（一层）关系匹配元素
    语法：选择器1>选择器2{样式声明}
  6.伪类选择器
    作用：匹配元素不同状态的选择器
    语法：所有的伪类都是以:作为开始
          选择器：伪类选择器{样式声明}
    类型：1.链接伪类
	    :link     匹配超级链接尚未访问的状态
	    :visited  匹配超级链接访问后的状态
          2.动态伪类
	    :hover   匹配元素悬停在元素上时的状态
	    :active  匹配元素被激活时的状态
	    :focus   匹配元素获取焦点时的状态
  7.选择器的优先级
    权值：标识当前选择器的重要程度，权值越大优先级越高
    元素选择器 1
    类选择器   10
    伪类选择器 10
    id选择器   100
    内联样式   1000
    !important max
    选择器的权值 加到一起，大的优先，权值相同，以后定义为主
2.尺寸与边框
  1.单位
    1.尺寸单位
      1.px:像素  
      2.in:英寸  1in=2.54cm
      3.pt:磅    1pt=1/72in
      4.em:相对于父元素乘以倍数（多个父元素）
      5.rem:相对于根元素字体大小乘以倍数
      6.%:相对于单位
    2.颜色单位（取值）
      1.颜色英文单词
      2.rgb(r,g,b) r:red g:green b:blue 取值范围0-255
      3.rgb(r%,g%,b%)
      4.rgba(r,g,b,a) a:alpha:取值为0-1之间的小数，值越小，越透明
      5.#rrggbb
      6.#rgb 是上面的缩写
  2.尺寸属性
    作用：改变元素的宽度和高度
    属性：
        宽度：width
	      min-width
	      max-width
	高度：height
	      min-height
	      max-height
     页面中允许设置尺寸的元素：
        1.所有的块级元素都允许设置尺寸
	2.行内块元素允许设置尺寸：除了单选按钮和复选框
	3.本身具备width和height属性的元素：table，img
     注意：大部分行内元素是无法修改其尺寸的
  3.溢出处理
    当内容多，元素区域小的时候，就会产生溢出的效果，默认都是纵向溢出
    属性：overflow,overflow-x,overflow-y
    取值：
        1.visible 可见的，默认值，溢出可见
	2.hidden  隐藏的，溢出的内容全部隐藏，不可见
	3.scroll  显示滚动条，溢出时，可用
	4.auto    自动，溢出时自动显示滚动条，没有时不出现
  4.边框属性
    1.简写方式
      border:width style color
        width：边框的宽度（以px为单位的数字）
	style：边框的样式
	  取值：solid：实线条
	        dotted:虚线边框（点）
		dashed:虚线边框（线）
	color：边框的颜色，也可取值为transparent（透明）
	以上定义的是四条边框的样式
	注意：取消边框为border:none/0;
    2.单边定义
      只设置某一条边框的三个属性
     属性:
     border-top/bottom/left/right:width style color
    3.单属性定义
      设置四条边的某一个属性
      属性：border-width/style/color:值
    4.单边单属性
      只设置某一个方向的某一个属性
      属性：border-方向-属性：值
            方向：top/bottom/left/right
	    属性：width/style/color
  5.边框倒角
    将元素的四个直角，直接倒成圆角
    属性：border-radius
    取值：以px为单位的数字 或者 百分比（设置圆形）
    单脚设置：
        border-top-left-radius:值；     //左上
        border-bottom-left-radius:值；  //左下
        border-top-right-radius:值；    //右上
        border-bottom-right-radius:值； //右下
  6.边框阴影
    属性：box-shadow
    取值：h-shadow v-shadow blur spread color inset;
          h-shadow:阴影在水平方向的偏移距离，必须值
		   取值为正，阴影向右偏移
		   取值为负，阴影向左偏移
	  v-shadow:阴影在垂直方向的偏移距离，必须值
		   取值为正，阴影向下偏移
		   取值为负，阴影向上偏移
	  blur:阴影模糊距离，取值越大，模糊效果越明显，以px为单位
	  spread:阴影的大小，指定要在基础阴影上扩充出来的大小距离，以px为单位
	  color:阴影的颜色
	  inset:将默认的外阴影改为内阴影。
  7.轮廓
    指的是边框的边框，绘制于边框外的线条
    属性：
       outline:width style color;
       outline:none/0; 取消轮廓
3.框模型
  1.什么是框模型
    框模型：box model，又称为盒子模型，定义了元素框处理元素内容，内边距，外边距以及边框的一种计算方式
    外边距：元素与元素之间的空白间距
    内边距：元素边框与内容之间的间距
    框模型默认的计算方式
       元素的实际占地宽度=左右外边距+左右边框+左右内边距+width
       元素的实际占地高度=上下外边距+上下边框+上下内边距+height
  2.外边距
    1.什么是外边距
      围绕在元素边框外的空白距离，就是外边距（元素与元素之间的距离）
    2.语法
      属性：margin 定义某个元素四个方向的外边距
        margin-top/bottom/left/right 定义单边外边距
      取值：1.以px为单位的数字
	    2.取值为负数，让元素向相反的方向移动
	    margin-left:取值为正，右移
	                取值为负，左移
	    margin-top: 取值为正，下移
	                取值为负，上移
            3.取值为%
	      外边距的值，以父元素的宽或高占比
	    4.取值为auto
	      自动计算外边距
	      注意：auto只对块级元素左右外边距起作用，让块级元素在水平方向居中显示
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2018/2/2
1.框模型
 1.外边距
  1.简洁写法：
      margin:value;  四个方向的外边距
      margin:v1 v2;  v1：上下外边距 v2：左右外边距
      margin:v1 v2 v3;  v1：上外边距 v2：左右外边距 v3：下外边距
      margin:v1 v2 v3 v4;  v1:上 v2:右 v3:下 v4:左 顺时针
  2.自带外边距的元素
    body,h1~h6,p,ul,ol,dl,pre
    通过CSS Reset（css重写）的方式，来重置具备外边距的元素
    body,h1,h2,h3,h4,h5,h6,p,ul,ol,dl,pre{
	margin:0;
    }
  3.外边距的特殊效果
    1.外边距的合并
      当两个垂直外边距相遇时，他们将合并成一个，最终的距离取决于两个外边距较大的
    2.外边距的溢出
      在某些特殊的条件下，为子元素设置上外边距时，有可能作用到父元素上
        1.父元素没有上边框
        2.为第一个元素设置上外边距
      解决方案：
        1.为父元素增加上边框
	  弊端：对父元素的高度带来影响
	2.使用父元素的内边距来取代子元素的上外边距
	  弊端：对父元素的高度带来影响
	3.在父元素的第一个子元素位置，增加一个空的<table></table>
    3.行内元素以及行内块元素的垂直外边距
      1.行内元素设置垂直外边距无效（img除外）,左右外边距相加
      2.行内块元素，设置垂直外边距时，整行元素都跟着发生改变
 2.内边距
  1.什么是内边距？
    元素边框与内容之间的空白间距
    内边距会扩大元素边框占地区域
  2.语法
    属性：padding:value 四个方向的内边距
	  padding-top/bottom/left/right  单边定义
    取值：以px为单位的数字
	  以百分比为单位的数字
    简洁写法：
         padding:value;
	 padding:v1 v2;       上下 左右
	 padding:v1 v2 v3;    上 左右 下
	 padding:v1 v2 v3 v4; 上 右 下 左
  3.属性：box-sizing
    作用：指定框模型的计算模式
    取值：
      1.content-box  默认值，默认计算方式
        元素的实际占地宽度=左右外边距+左右边框+左右内边距+width
      2.border-box  元素的尺寸，会包含border以及padding的值（margin除外）
       实际占地宽度=width(width+border+padding)+margin
       实际占地宽度=height(height+border+padding)+margin
2.背景
  1.背景颜色
    属性：background-color
    取值：合法的颜色值
    注意：背景颜色和背景图片默认都从边框位置处开始填充。
  2.背景图片
    属性：background-image
    取值：url(图片的路径);
    ex:
      background-image:url(a.jpg);
  3.背景图片的平铺
    属性：background-repeat
    取值：
        1.repeat 默认值，横向和纵向都平铺
	2.no-repeat 无平铺效果，只显示一次
	3.repeat-x 只在横向平铺 
	4.repeat-y 只在纵向平铺
  4.背景图像的尺寸
    属性：background-size
    取值：
        1.width height
	2.width% height%
	3.cover 将背景图等比放大，直到背景图完全覆盖到元素的所有区域为止。
	4.contain
	  将背景图等比放大，直到背景图碰到元素的某一个边缘为止。
  5.背景图像的固定
    属性：background-attachment
    取值：
      1.scroll 默认值，滚动
      2.fixed 固定

  6.背景图像的定位
    作用：改变背景图在元素中的位置
    属性：background-position
    取值：
       1.x y 
         x：背景图片在水平位置的偏移
	    取值为正，向右移动
	    取值为负，向左移动
	 y：背景图像在垂直位置的偏移
	    取值为正，向下移动
	    取值为负，向上移动
       2.x% y%
         0% 0%:背景图在左上角
	 50% 50%：背景图在中间
	 100% 100%：背景图在右下角
       3.关键字
         x:left/center/right
	 y:top/center/bottom
	 ex:
	  background-position:center center;
  7.背景的简写属性
    在一个属性中指定背景的多个属性值。
    属性：background
    取值：color url() repeat attachment position;
    如果不设置其中某个值的话，该位置将采用默认值。
3.渐变
  1.什么是渐变
    渐变指的是多种颜色平缓变化的一种显示效果。
  2.渐变的主要因素
    1.色标：一种颜色及其出现的位置
    2.一个渐变是由多少色标组成（至少两个）
  3.渐变的分类
    1.线性渐变
      以直线的方向来填充渐变色
    2.径向渐变
      以圆形的方式实现的填充效果
    3.重复渐变
      将线性渐变和径向渐变 重复几次实现出来
  4.线性渐变
    属性：background-image
    取值：linear-gradient(angle,color-point1,color-point2,...);
        1.angle 表示渐变填充的方向或角度
	  取值：
	     1.关键词
	       to top:从下向上填充渐变色
	       to bottom:从上向下填充渐变色
	       to right:从左向右填充渐变色
	       to left:从右向左填充渐变色
	     2.角度值
	       0deg 从下向上填充渐变色，等同于to top
	       90deg 从左向右填充渐变色，等同于to right
	       180deg 从上向下填充渐变色，等同于to bottom
	       270deg 从右向左填充渐变色，等同于to left

        2.color-point
	  色标：颜色 及其 位置
	  取值：颜色 以及 位置的组合，中间用空格隔开
	  ex:
	    1.red 0% 在填充方向的开始位置处颜色为红色
	    2.green 50% 到填充方向一半的位置处，颜色变为绿色
	    3.blue 200px 到填充方向的200px的位置处，颜色变为蓝色
  5.径向渐变
    属性：
    background-image:radial-gradient([size at position],color-point1,color-point2,...);
       size at position:
       size:半径，以px为单位的数字
       position:圆心所在位置
            1.x y:具体数字
	    2.x% y%:元素宽和高的占比决定
            3.关键字：
	      x:left/center/right
	      y:top/center/bottom
  6.重复渐变
    1.重复线性渐变
      background-image:repeating-liner-gradient(angel,color-point...);
      color-point:位置一定要给绝对数值（px）,不要给相对%.
    2.重复径向渐变
      background-image:repeating-radial-gradient([size at position],color-point...);

      浏览器是否支持新属性查询位置：www.caniuse.com
  7.浏览器兼容性
    各浏览器的新版本基本都支持渐变属性
    对于不支持的浏览器版本，可以通过增加浏览器前缀的方式，让浏览器支持渐变属性。
    firefox:-moz-
    chrome&safari:-webkit-
    oprea:-o-
    IE:-ms-
    ex:
    background-image:-webkit-radial-gradient(100px at left top,blue 0px,red 100px,yellow 200px);
4.文本格式化属性
  1.字体属性
    1.指定字体类型
      属性：font-family
      取值：用逗号隔开字体名称列表
      ex:
        font-family:"微软雅黑",Arial,"黑体";
    2.字体大小
      属性：font-size
      取值：以px或pt为单位的数字
    3.字体加粗
      属性：font-weight
      取值：
        1.bold 加粗
	2.normal 正常
	3.value 无单位的数字 
	  400-900整百倍数字
    4.字体样式
      属性：font-style
      取值：
         normal 正常
	 italic 斜体显示
    5.小型大写字母
      将小写字符变为大写，但大小与小写字符一致。
      属性：font-variant
      取值：
         normal 正常
	 small-caps 小型大写字符
    6.字体属性简写方式
      属性：font
      取值：style variant weight size family;
      注意：
         使用简写属性时，必须要设置family的值，否则无效。
	 ex:
	 font:12px;            //不对
	 font:12px "微软雅黑"; //正确
  2.文本格式
    1.文本颜色
      属性：color
      取值：合法颜色值
    2.文本排列方式
      作用：文本在水平方向的对齐方式
      属性：text-align
      取值：left/center/right/justify(两端对齐)
    3.线条修饰
      属性：text-decoration
      取值：
         1.none:无任何线条
	 2.underline:下划线
	 3.overline:上划线
	 4.line-through:删除线
    4.行高
      作用：设置文本所占的高度
      属性：line-height
      取值：以px为单位的数字
      注意：如果行高的高度大于字体本身的大小，那么该行文本将在指定的行高内呈现垂直居中的效果。
    5.首行文本缩近
      属性：text-indent
      取值：以px为单位的数字
    6.文本阴影
      属性：text-shadow
      取值：h-shadow v-shadow blur color;  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2018/2/5
1.表格
 1.表格的常用属性
  1.边距属性：padding
  2.边框属性：border
  3.尺寸属性：width,height
  4.文本格式化属性：font-*,text-*
  5.背景：颜色，背景图片，渐变
  6.vertical-align
    作用：指定单元格数据的垂直对齐方式
    取值：top:上对齐
	  middle:居中对齐
	  bottom:下对齐
 2.表格的特有属性
   1.边框合并
     属性：border-collapse
     取值：1.separate 默认值，分离边框模式
	   2.collapse 边框合并
   2.边框边距
     设置单元格之间或单元格与表格之间的间距
     属性：border-spacing
     取值：1.给定一个值：水平和垂直方向间距相同
           2.给定两个值：第一个值表示水平间距，第二个表示垂直间距
     注意：只有在边框分离模式下，边框边距才有效
   3.标题位置
     属性：caption-side
     取值：1.top     默认在表格内容之上
           2.bottom  标题在表格内容之下
 3.显示规则
   作用：用来帮助浏览器指定如何布局一张表，也就是指定td尺寸的计算方式
   属性：table-layout
   取值：1.auto 默认值，即自动布局表格布局，列的尺寸实际上由内容来决定
	 2.fixed 固定表格布局，列的尺寸由设定的值为准
   自动表格布局VS固定表格布局：
      1.自动表格布局
        1.单元格的大小会适应内容
	2.表格复杂时，加载速度比较慢
	3.布局灵活
	4.适用于不确定每列大小时使用
      2.固定表格布局
        1.单元格尺寸取决于设置的值
	2.任何情况下都会加载显示表格
	3.不够灵活
	4.适用于确定每一列大小时使用
2.定位-浮动定位
 1.定位
   定位，指定页面中元素它该出现的位置(改变元素的默认位置)
 2.定位分类
   按照定位的效果，可以分为以下几类
     1.普通流定位（默认定位方式）
       又称为文档流定位，页面元素默认的定位方式
	1.每个元素在页面中都有自己的空间
	2.每个元素都是在其父元素左上角开始出现的
	3.页面中块级元素都是按照从上到下逐个排列，每个元素独占一行
	4.页面中的行内元素以及行内块都是按照从左往右来排列的
     2.浮动定位
	1.特点
	  1.元素一旦浮动起来将脱离文档流，不再页面空间，其他未浮动元素将上前补位
	  2.元素浮动以后停靠在父元素的左边或右边，或其他已经浮动元素的边缘上
	  3.浮动解决的问题：让多个块级元素在一行中显示
	2.语法
	  属性：float
	  取值：left：左浮动，让元素停靠在元素的左边，或挨着左侧已有的浮动元素
		right：右浮动，让元素停靠在元素的右边，或挨着右侧已有的浮动元素
		none：默认值，即无任何浮动效果
	3.浮动引发的特殊效果
	  1.当父元素显示不下所有的以浮动元素时，最后一个将换行，但是有可能被卡主
	  2.元素一旦浮动起来后，未指定宽度时，宽度将以内容为主
	  3.元素一旦浮动起来时，将变为块级，允许修改尺寸，能正常处理垂直方向外边距
	  4.文本，行内元素，行内块元素时采用环绕的方式来排列，是不会被浮动元素压在下面
	4.清除浮动所带来的影响
	  元素一旦浮动起来之后，就会对后续元素带来一定的位置影响（后续上前补位），如果后续元素不想别影响的话，那么久通过清除浮动的方式解决
	  属性：clear
	  取值：1.left  清除当前元素 前面元素左浮动带来的影响
		2.right 清除当前元素 前面元素右浮动带来的影响
		3.both  清除当前元素 前面元素浮动带来的影响
		4.none  默认值，不做任何清除浮动操作
	5.浮动元素对父元素高度带来的影响
	  元素的高度，都是以未浮动元素的高度为准，浮动元素时不占高度的
	 解决父元素高度方案如下：
	  1.直接设置父元素的高度
	    弊端：并不是每次都知道父元素的高度
	  2.设置父元素也浮动
	    弊端：不是任何时候父元素都需要浮动，而且浮动会影响后续元素
	  3.为父元素设置overflow
	    取值：hidden或auto
	    弊端：如果有内容需要溢出要显示的话，也会被一同隐藏
	  4.在父元素中，追加一个空子元素（块级），并设置其clear:both
     3.相对定位
     4.绝对定位
     5.固定定位
3.显示
  1.显示方式
    1.什么是显示方式
      决定元素在网页中的变现形式（块级，行内，行内块，table）
    2.语法
      属性：display
      取值：1.none   不显示元素——隐藏 
		特点：脱离文档流，不占页面空间
	    2.block  让元素表现的与块级元素一致
		特点：独自成行
		      允许修改尺寸
	    3.inline 让元素表现的与行内元素一致
		特点：不允许修改尺寸
		      多个元素在一行中显示
		      无法设置垂直外边距
	    4.inline-block 让元素表现的与行内块一致
		特点：允许修改尺寸
		      多个元素在一行中显示
	    5.table  让元素表现的与表格一致
		特点：尺寸以内容为准
		      每个元素独占一行
		      允许修改尺寸
  2.显示效果
    1.显示/隐藏
      属性：visibility
      取值：1.hidden 元素不可见——隐藏
	    2.visible 默认值，元素可见
      面试Q：display:none和visibility:hidden区别？
	 答：display:none会脱离文档流，不占页面空间		 
	     visibility:hidden不会脱离文档流，占页面空间
  3.透明度
    属性：opacity
    取值：0-1的小数（数字越小，越透明）
    注意：rgba与opacity的区别：opacity作用于元素，以及元素所有内容的透明度
			       rgba只作用于元素的颜色或其背景颜色
  4.垂直对齐方式
    属性：vertical-align
    场合：1.表格中使用
	    取值：top/middle/bottom
	  2.图片中使用
	    取值：top、middle、bottom、baseline（默认，基线对齐）
	注意：编写网页时，通常都会将所有图片的垂直对齐方式更改为除baseline以外的任何一个值
  5.光标
    作用：改变鼠标悬停在元素上时，鼠标的状态
    语法：cursor
    取值：1.default：默认值，箭头
	  2.pointer：小手
	  3.wait：等待加载
	  4.text：I
	  5.crosshair：+
	  6.help：帮助
4.列表
  1.列表项标识
    属性：list-style-type
    取值：none、disc、circle、square
  2.列表项图像
    作用：使用自定义图像作为列表的标识
    属性：list-style-image
    取值：url(图像路径);
  3.列表项位置
    作用：将默认列表项标识的位置，放到li的里面
    属性：list-style-position
    取值：1.outside 默认值，将标识显示在li外面
	  2.inside  将标识放置于li里面
  4.列表属性的缩写
    属性：list-style
    取值：type url() position;
    常使用场合：list-style:none;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2018/2/6
1.定位
  1.相对定位/绝对定位/固定定位
    1.定位属性
      属性：position
      取值：static：静态，静止，默认值
	    relative：相对定位
	    absolute：绝对定位
	    fixed：   固定定位
    2.偏移属性
      top/bottom/left/right
      以上四个属性取值均为数字（px）
    3.定位详解
     1.相对定位
      1.什么是相对定位
       元素相对于它原来的位置偏移某个距离
      2.使用场合
       在做元素位置的微调时使用
      3.语法
       position:relative;
       注意：配合偏移属性使用
     2.绝对定位
      1.什么是绝对定位&特点
        1.绝对定位后元素会脱离文档流——不占页面空间
	2.绝对定位的元素会相对于离他最近的，已定位的，祖先元素去实现位置的初始化
	3.如果没有已定位的祖先元素，那么元素就相对于body去实现位置的初始化
      2.语法
        position:absolute;
	配合偏移属性实现位置的修改
      3.使用场合
        1.有堆叠效果的元素
	2.弹出菜单
      注意：如果子元素实现绝对定位，可设置父元素为相对定位
	    元素做了绝对定位后将变为块级元素
     3.堆叠顺序
       一旦将元素变为已定位元素的话，元素们有可能出现堆叠的效果
       属性：z-index
       取值：无单位的数字，数字越大越靠上
       注意：只有已定位元素才能使用z-index属性。父子元素之间，z-index无效，永远都是子元素压在父元素上方
     4.固定定位
       1.什么是固定定位
         将元素固定在页面中某个位置处，位置不会随着滚动条而发生位置的变化
       2.语法
         position:fixed;
	 配合偏移属性使用
       3.注意
         1.固定定位的元素会脱离文档流——不占页面空见
	 2.固定定位的元素会变成块级元素
	 3.固定定位的元素永远都是相对于body去实现位置的初始化偏移
2.复杂选择器
  1.兄弟选择器
    兄弟元素：具备相同父元素的平级元素称之为兄弟元素
    1.相邻兄弟选择器
      作用：获取紧紧挨在某元素后的兄弟元素
      语法：选择器1+选择器2{}
    2.通用兄弟选择器
      作用：获取某元素后的所有满足条件的兄弟元素
      语法：选择器1~选择器2{}
  2.属性选择器
   1.作用
     允许通过元素所附带的属性及其值匹配页面的元素
   2.语法
     1.基本语法
       [属性名]
       作用：匹配页面中所有附带该属性名的所有元素
     2.元素[属性名]
       作用：匹配页面中所有附带该属性名的该元素
     3.[属性名1][属性名2][属性名3]
       作用：匹配同时附带多个属性的所有元素
     4.[属性名=值]
       作用：匹配页面中属性为值的元素
       值可加引号可不加引号
  3.伪类选择器
    已学过的伪类：
      链接伪类：:link :visited
      动态伪类：:hover :active :focus
    1.目标伪类
      作用：突出显示活动的HTML锚点元素，匹配被激活的锚点
      语法：选择器:target{...}
    2.结构伪类
      作用：通过元素的结构关系来匹配元素
      1.:first-child
        匹配的元素是属于其父元素的第一个子元素
      2.:last-child
        匹配的元素是属于其父元素的最后一个子元素
      3.:nth-child(n)
        匹配的元素是属于其父元素的第n个元素
      4.:empty
        匹配没有子元素的元素
      5.:only-child
        匹配的元素是属于其父元素中的唯一子元素
    3.否定伪类
      将满足指定选择器的元素给排除在外
      语法：:not(selector){}
    4.伪元素选择器
      1.:first-letter或::first-letter
        作用：匹配某个元素的首字符
      2.:first-line或::first-line
        作用：匹配某个元素的首行
      3.::selection
        作用：匹配被用户选取的内容
	注意：只能修改文本颜色和背景颜色
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2018/2/7
1.内容生成
  1.什么是内容生成
    使用css动态向某元素插入一段内容
  2.伪元素选择器
    1.:before或::before
      作用:匹配到某元素的内容区域之前
    2.:after或::after
      作用:匹配到某元素的内容区域之后
    3.属性
      属性：content
      作用：向匹配到的位置处增加内容
      取值：1.字符串：用""将文本内容引起来
            2.图像：url()
    4.解决问题
      1.浮动问题
        1.添加一个块级元素
	2.该元素位于父元素的最后一个子元素位置处
	3.该元素必须为空
	4.设置clear为both
	内容生成方式解决：
	 选择器:after{
		content:"";
		display:block;
		clear:both;
	 }
      2.上外边距溢出问题
        1.显示为table
	2.该元素为空
	 选择器:after{
		content:"";
		display:table;
	 }
2.弹性布局（Flexble layout）
  1.什么是弹性布局
    弹性布局，是一种布局方式，主要是解决某元素中“子元素”的布局方式，为布局提供最大的灵活性
  2.弹性布局的布局
    1.弹性布局的容器
      简称“容器”，子元素的父元素
    2.弹性布局的项目
      简称“项目”，要实现布局效果的元素
    3.主轴
     项目们排列方向的一根轴，就称为主轴，如果项目按照X轴排列（横轴就是主轴），那么X轴就是主轴，如果项目按照y轴排列（横轴就是主轴），那么y轴就是主轴
    4.交叉轴
     与主轴交叉的一根轴就是交叉轴，如果主轴是X轴，交叉轴就是y轴。主轴是y轴，交叉轴就是x轴。
  3.语法
    1.容器
      将元素变为flex容器，那么素有的子元素都将变为项目，都允许按照的弹性布局的方式排列
      属性：display
      取值：flex：将块级元素变为容器
	    inline-flex：将行内元素变为容器
      注意：
	  1.元素设置为flex容器之后，子元素的float，clear，vertical-align都将失效
	  2.容器的text-align属性会失效
    2.容器的属性
      1.flex-direction
        作用：指定容器的主轴及其排列方式
	取值：
	  1.row 默认值，即主轴为X轴，起点在左端
	  2.row-reverse 主轴为X轴，起点在右端
	  3.column 主轴为y轴，起点在顶端
	  4.column-reverse 主轴为y轴，起点在底端
      2.flex-wrap
        作用：当一个主轴排列不下所有项目时，如何换行
	取值：
	  1.nowrap 默认值，即空间不够时，也不换行，项目会自动缩小
	  2.wrap 换行
	  3.wrap-reverse 换行反转
      3.flex-flow
        作用：是flex-direction和flex-wrap的缩写形式
	取值：1.row nowrap 默认值
	      2.direction(任意值) wrap(任意值)
      4.justify-content
        作用：定义项目在主轴上的对齐方式
	取值：
	  1.flex-start 默认值 在主轴起点位置对齐
	  2.flex-end 在主轴终点对齐
	  3.center 在主轴上居中对齐
	  4.space-between 两端对齐
	  5.space-around 每个项目两端的间距相等
      5.align-items
        作用：项目在交叉轴的对齐方式
	取值：1.flex-start 默认值 在交叉轴起点位置对齐
	      2.flex-end 在交叉轴终点对齐
	      3.center 在交叉轴上居中对齐
	      4.baseline 在项目的第一行文字基线对齐
	      5.stretch 如果项目未设置尺寸，在交叉轴上将占满空间
    3.项目的属性
      该组属性只能设置在某一项目元素上，只控制一个项目，是不影响容器以及项目的效果
      1.order
        作用：定义项目的排列顺序，值越小，越靠近起点，默认值为0
	取值：整数的数字，无单位
      2.flex-grow
        作用：定义项目的放大比例，如果容器有足够的剩余空间，可以指定项目将如何放大
	取值：整数的数字，无单位 默认为0，不放大，取值越大，占据剩余空间越大
      3.flex-shrink
        作用：定义项目的缩小比例，如果容器剩余空间不足时，可以指定项目将如何缩小
	取值：整数的数字，无单位 默认为1，空间不足时，则等比缩小，取值为0,不缩小
      4.align-self
        作用：定义当前项目在交叉轴上的对齐方式
	取值：1.flex-start 默认值 在交叉轴起点位置对齐
	      2.flex-end 在交叉轴终点对齐
	      3.center 在交叉轴上居中对齐
	      4.baseline 交叉轴基线对齐
	      5.stretch 如果项目未设置尺寸，在交叉轴上将占满空间
	      6.auto 继承父元素的align-items
3.转换
 1.什么是转换
   改变元素在页面中的位置，大小，角度以及形状的一种方式
   2D转换：只在x轴和y轴上发生的转换效果
   3D转换：增加在z轴的转换效果
 2.转换
   1.转换属性
     transform
     取值：none 默认值，无任何转换效果
           transform-function 表示1个或多个转换函数，如果是多个转换函数，中间用空格隔开
   2.转换的原点
     属性：transform-origin
     取值：数值/百分比/关键词
         2个值：表示原点在X轴和y轴上的位置
	 3个值：表示原点在X轴、y轴和z轴的位置
	 默认原点在元素的中心位置处（center,center）或（50%,50%）
   3.2D转换
     1.位移
       什么是位移？
       改变元素在页面中的位置
      2.语法
        属性:transform
        取值:
         1.translate(x)指定元素在X轴上位移距离，
            取值为正，元素向右，取值为负，元素向左
	 2.translate(x,y)x:同上，y:指定元素在y轴上位移距离，
                             取值为正，元素向下，取值为负，元素向上
         3.translateX(x) 单独指定X轴距离
	 4.translateY(y) 单独指定y轴距离
     2.缩放
       什么是缩放？
       改变元素在页面中的尺寸
       属性：transform
       取值：1.scale(value)
               value：横向或纵向的缩放比例
	              默认值为1
		      >1:放大
		      <1:缩小
		      负数：放大（水平和垂直都翻转180度）
	     2.scale(x,y)
	       x：横向缩放比例
	       y：纵向缩放比例
             3.单向缩放函数
	       scale(x) 横向缩放比例
	       scale(y) 纵向缩放比例
     3.旋转
       什么是旋转？
       改变元素在页面中的角度
       语法：
       属性：transform
       取值：rotate(ndeg)
             n取值为正，顺时针旋转
	     n取值为负，逆时针旋转
       注意：旋转是连同坐标轴一同旋转的，会影响旋转后的位移效果
             转换原点会影响最后的转换效果
     4.倾斜（长方形=>平行四边形）
      1.什么是倾斜
        改变元素在页面中的形状 
      2.语法
        属性：transform
	取值：1.skewX(xdeg) 让元素向X轴产生倾斜，实际上改变的是Y轴的角度
			    x取值为正，y轴逆时针倾斜
			    x取值为负，y轴顺时针倾斜
             2.skewY(ydeg) 让元素向Y轴产生倾斜,实际上改变的是x轴的角度
			    y取值为正，x轴顺时针倾斜
			    y取值为负，x轴逆时针倾斜
	      3.skew(x)
	      4.skew(x,y)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2018/2/8
1.3D转换
  1.透视距离
    模拟人的眼睛到3D转换元素之间的距离（z轴）
    属性：perspective
    注意：该属性要加在3D转换元素的父元素上
  2.3D旋转
    属性：transform
    取值：1.rotateX(xdeg) 以x轴为中心轴，旋转元素的角度
	  2.rotateY(ydeg) 以y轴为中心轴，旋转元素的角度
	  3.rotateY(zdeg) 以z轴为中心轴，旋转元素的角度
	  4.rotate3D(x,y,z,ndeg) x,y,z取值大于0数字，表示该轴参与旋转，取值为0则不参与旋转
	  ex:rotate3D(1,0,0,45deg)//表示只在x轴上旋转
2.过渡
  1.什么是过渡
    使css的属性值，在一段时间内平缓变的效果
  2.语法
    1.指定过渡属性
      作用：指定哪个属性值在变化的时候需要使用过渡效果来体现
      属性：transition-property
      取值：1.all 只要是能使用过渡属性的，一律都用过渡来体现
	    2.具体属性名称
	      允许使用过渡效果的属性：
	        1.颜色属性
		2.取值为数字的属性
		3.转换属性（transform）
		4.阴影属性
		5.渐变属性
		6.visibility属性
    2.指定过渡时长
      作用：指定在多长时间内完成过渡操作
      属性：transition-duration
      取值：以s或ms为单位的数字
            1s=1000ms
    3.指定过渡速度时间曲线函数
      属性：transition-timing-function
      取值：1.ease 默认值，效果是慢速开始，快速变快，慢速结束
	    2.linear 匀速
	    3.ease-in 慢速开始，加速结束
	    4.ease-out 快速开始，慢速结束
	    5.ease-in-out 慢速开始和结束，中间先加速后减速
    4.指定过渡延迟时间
      属性：transition-delay
      取值：以s或ms为单位的数字
  3.过渡属性的编写方式
    1.将过渡放在元素声明的样式中，既管去，又管回
    2.将过渡放在触发的操作中，只管去，不管回
  4.过渡的缩写
    transition:property duration timing-function delay
3.动画
  1.什么是动画
    使用元素从一种样式逐渐变化为另一种样式，即将多个过渡效果放在一起
    动画通过“关键帧”，来控制动画的每一步
    关键帧：1.动画执行的时间点
	    2.在该时间点上的样式是什么
  2.动画的使用步骤
    1.声明动画
      为动画起名
      定义关键帧
    2.为元素调用动画
      指定元素调用动画名称及各个参数属性
  3.声明动画
    @keyframes 动画名称{
	/*定义该动画的关键帧*/
	0%{
	 /*动画开始时元素的样子*/
	}
	50%{
	 /*动画一半时元素的样子*/
	}
	100%{
	 /*动画结束时元素的样子*/
	}
    }
    兼容低版本浏览器（加前缀）：
    @-webkit-keyframes{}
    @-moz-keyframes{}
    @-ms-keyframes{}
    @-o-keyframes{}
  4.调用动画属性
    1.animation-name
      作用：指定调用动画的名称
    2.animation-duration
      作用：指定动画执行一个周期的时长
      取值：以s或ms为单位的数字
    3.animation-timing-function
      作用：指定动画的速度时间曲线函数
      取值：1.ease 默认值，效果是慢速开始，快速变快，慢速结束
	    2.linear 匀速
	    3.ease-in 慢速开始，加速结束
	    4.ease-out 快速开始，慢速结束
	    5.ease-in-out 慢速开始和结束，中间先加速后减速
    4.animation-delay
      作用：指定动画的延迟时间
      取值：以s或ms为单位的数字
    5.animation-iteration-count
      作用：指定动画的播放次数
      取值：1.具体数次
            2.infinite：无限次播放
    6.animation-direction
      作用：指定动画播放的方向
      取值：1.normal 默认值，0%-100%
            2.reverse 逆向播放，100%-0%
	    3.alternate 轮流播放，奇数次播放时，正向，偶数次，逆向
    7.动画的简写方式
	animation: name duration timing-function delay iteration-count direction;
    8.animation-fill-mode
      作用: 规定动画在播放前或播放后的状态
      取值: 1.none 默认值
            2.forwards 动画播放完成以后,将保持在最后一个帧的状态上
            3.backwards  动画播放前, 延迟时间内,动画保持在第一个帧的状态上
            4.both forwards和backwards的结合体
    9.animation-play-state
      作用: 指定动画是处于播放还是暂停的状态上
      取值:1.paused:暂停
           2.running: 播放
4.CSS Hack
	1.解决IE浏览器兼容性问题
	  解决办法: 针对不同的浏览器版本编写不同的代码
	2.CSS Hack 的实现方式
	  1.在样式属性名前面或属性值的后面增加前后缀,以便识别不同的浏览器
	    -: IE6的前缀
	    +: IE6/7的前缀(放在属性名称之前)
	    \0:IE8,9,10的后缀(放在属性值之后)
	    \9\0: IE9,10的后缀(放在属性值之后)
	  2.CSS 选择器 Hack
	    在选择器前增加前缀以便识别不同的浏览器
	    *: 识别IE6
	    *+: 识别IE7
	  3.HTML头部引用Hack
	    使用IE条件注释来判断IE浏览器的版本,从而执行不同代码
	    语法:<!--[if 条件 IE版本号]>
		满足条件要执行的HTML代码
		<![endif]-->
                版本号: 6-10
                条件:1.gt 只有在大于指定版本的浏览器中执行代码
		     2.gte 大于等于
		     3.lt 小于
		     4.lte 等于
		     5.! 指定版本以外
		     6.省略条件
