2018/1/18
JavaScript
 1.JavaScript概述
   1.什么是JavaScript？
     JavaScript，简称js,js是一种运行于js解释器或者引擎中的脚本语言。
     js的运行环境：
       1.独立安装的js解释器（node）
       2.嵌入在浏览器内核中的js解释器
   2.js的发展史
     1.1992年Nombas公司为自己的软件开发了一款脚本语言，可以在浏览器中运行的ScriptEase
     2.1995年网景公司开发了一款脚本语言LiveScript，后期更名为JavaScript
     3.1996年微软在IE3.0克隆JavaScript叫JScript
     4.1997年JavaScript提交给了ECMA（欧洲计算机制造商联合会），从此核心内容定义为ECMAscript
   3.JS的组成
     完整的JS的组成由三部分组成
       1.核心：ECAMSscript
       2.DOM（Document Object Model）文档对象模型
         提供了一组允许操作页面元素的函数和属性
       3.BOM（Browser Object Model）浏览器对象模型
         提供了一组允许操作浏览器的函数和属性
   4.特点
     1.语法类似C，Java，PHP
     2.无需编译，由JS解释器直接运行
     3.弱类型语言
     4.面向对象的
 2.JavaScript基础语法
   1.使用JavaScript
     1.搭建运行环境
      1.安装独立的js解释器——NodeJS
         nodejs.org下载稳定低版本
	 win+r输入cmd，
	 输入node回车，
	 输入console.log("任意字符");
      2.使用浏览器内核中嵌入的JS解释器
         1.直接在谷歌浏览器F12的Console中输入脚本并运行
	 2.将JS脚本嵌入到网页中执行
	   1.HTML元素的事件执行JS脚本
	     事件：onclick —— 鼠标的单击事件（单击鼠标时执行的操作）
	     <input type="button" value="点我试试" onclick="console.log('傻逼，点你咋地！')">

             <div onclick="alert('傻逼，点你咋地！')">点我试试</div>

		console.log：从输出台输出内容
		alert：弹出框/提示框
           2.在<script></script>中编写脚本并执行
	     网页中任意位置，嵌入<script></script>,并且在这对标记中编写JS脚本
	 3.使用外部脚本文件（.js为后缀）
	   1.使用步骤
	     1.创建独立的脚本文件（***.js）并编写脚本
	     2.在使用的网页中引入JS脚本：<script src="JS脚本路径"></script>
      3.JS调试
        出错时只影响当前块，不影响其他代码块，后续代码块继续执行。
	F12调出控制台（在控制台中指出行号和错误）
      4.通用语法规范
        语句：可执行的最小单元，必须以分号，严格区分大小写,所有符号必须是英文状态
	注释：//:单行注释     /**/:多行注释
   2.变量和常量
     1.变量的声明
       1.声明变量
         var 变量名; 
       2.为变量赋值
         变量名=值;
       3.声明变量时直接赋值
         var 变量名=值;
       注意：
        1.允许在一条语句中声明多个变量，变量之间用逗号隔开
	2.声明变量时可以不使用var，但不推荐
	3.如果声明变量，但是未赋值，则默认为undefined
     2.变量名的命名规范
       1.不允许使用js的关键字和保留关键字
          var，if,else,for,name,open...
       2.不能以数字开头
       3.允许包含字母，数字，下划线，$
       4.最好见名知意
       5.尽量使用小驼峰命名法
   3.变量的使用
     1.声明变量未赋值时，值默认为undefined
     2.使用为声明变量，则报错
     3.赋值操作
       变量名出现在=的左边，一律都是赋值操作
       变量名=值;
     4.取值操作
       变量名只要没出现=的左边，一律都是取值操作
   4.常量
     1.什么是常量
       在程序中，一经声明就不允许被修改的数据就是常量
     2.语法
       const 常量名=值;
      常量名在程序中，通常采用全大写形式
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2018/1/19
1.数据类型
  1.数据类型的作用
    规定了数据在内存中所占的空间
    例如：var l=62.8 占8个字节
          var s=314  占4个字节
    bit:位
    8bit=1字节（byte:简写B）
  2.数据类型详解
    1.分类
      原始类型（基本类型、值类型）
       1.Number类型
        数字类型
	作用：可以表示32位的整数，也可以表示64位的浮点数（小数）
	整数：
	 1.十进制
	   由0-9十个数字组成，逢十进一
	 2.八进制
	   由0-7八个数字组成，逢八进一
	 3.十六进制
	   由0-9和A-F组成，逢十六进一
	浮点数：
	  小数计数法：3.1412
	  指数计数法：3.4e3 => 3.4*10^3
       2.string类型
        字符串类型
	作用：表示一系列的文本字符数据
	字符串都是由Unicode字符，标点和数字组成
	Unicode码：每个字符在计算机中都有一个唯一的码表示该字符，该字符称为Unicode码
	 查找一个字符的Unicode码：charCodeAt();
	 如何将Unicode转换为汉字：var str="\u"
	转义字符：
	 \n:换行
	 \t:制表符（缩进）
	 \": "
	 \': '
	 \\: \
       3.Booleean类型
        作用：在程序中表示真或假的结果
	取值：true或false
	在参与到数学运算是，true可以当做1，false可以当做0
       4.Undefined类型
        作用：表示数据不存在（定义变量但为赋值）
        只有一个值，undefined
       5.NULL类型
        作用：用于表示尚不存在的对象
        只有一个值：null
      引用类型
       ES原生对象
        String Number Boolean ————包装类型
	Array Date RegExp Math
	Error
	Function Object
	Global(在浏览器被window代替)
       宿主对象
        BOM
	 window
	 history
	 location
	 navigator
	 document
	 event
	 screen
	DOM
       自定义对象
        1.var e={}
	2.var e=new Object()
	3.function Emp(){}
	  var e=new Emp()
	4.var e=Object.create(new Parent())
	5.class Emp extends Parent{}
	  var e=new Emp()
    2.数据类型转换
      1.隐式转换
        又称为自动转换
	不同类型的数据在计算工程中进行自动转换
	 1.数字+字符串：数字转换为字符串
	 2.数字+布尔：将布尔转换为数字
	 3.字符串+布尔：将布尔转换为字符串
	 4.布尔+布尔：将布尔转换为数字
        允许使用typeof()的函数检查变量的数据类型
      2.强制转换
	通过转换函数改变数据类型
         1.toString();
	   将任意类型转换为字符串类型
	   语法：var result=变量.toString();
	 2.parseInt();
	   将任意的类型转换为整数
	   语法：var result=parseInt(数据);
	   如果转换不成功，结果为NaN（Not a Number）
	 3.parseFloat();
	   将任意类型转换为小数
	   语法：var result=parseFloat(数据);
	   如果转换不成功，结果为NaN（Not a Number）
	 4.Number();
	   将任意类型的数据转换为number    #输出弹出框：prompt();
	   语法：var result=Number(数据);
	   如果包含不是数字格式的字符，则返回NaN
2.运算符和表达式
  1.什么是表达式
    由运算符连接操作数所组成的式子就是表达式，任何一个表达式都会有结果
  2.运算符
    1.算术运算符
      +、-、*、/、%、++、--
      ++：自增运算符，做+1操作
         ++在前，先自增，再运算；
	 ++在后，先运算，再自增；
    2.关系运算符
      >,<,>=,<=,==,!=,===,!==
      运算结果都为boolean类型
      关系运算符两端，只要有一个是number的话，另一个会隐式转换为number在进行比较
      关系运算符两端，如果都是string，则比较每位字符的Unicode码，通过charCodeAt();查询Unicode码
      注意：NaN与任何数据作比较时，结果都是false，与任何数据做!=，结果都是true
      isNaN(数据);判断数据是否是不是数字,如果不是数字,返回为true,是数字返回false
    3.逻辑运算符
      1.类型：&&，||，!
        !:取反
	&&：与，并且，关联的条件都为true，才为true
	||：或，关联的条件，只要有一个true，就为true
      2.短路逻辑
        短路逻辑&&
	   当第一个条件为false时，整体表达式为false，不需要判断第二个条件
	   当第一个条件为true时，会继续判断或执行第二个条件
	短路逻辑||
	   当第一个条件为true时，就不在执行后续表达式，整体为true
	   当第一个条件为false时，会继续执行第二个条件
    4.位运算符
      >>,<<,&,|,^
      右移是把数变小，左移是把数变大
      &：按位与，判断奇偶性
         任意数字与1做按位与，结果为1，则为奇数，结果为0，则为偶数
      |：按位或，对小数取整
         将任意数字与0按位或，结果则取整数部分
      ^：按位异或，用于去交换两个数字
   	  a=a^b;
    5.赋值运算符和扩展运算符
      1.赋值运算符 =
      2.扩展运算符
        +=，-=，*=，/=，%=，^= ...
	a+=b -->a=a+b
	a+=1-->a=a+1 ;a++;++a
	a=a^b; -->a^=b;
	b=b^a; -->b^=a;
	a=a^b; -->a^=b;
    6.条件（三目）运算符
      单目（一元），只要一个操作数或表达式

      双目（二元），需要两个操作数或表达式
      +，-，*，/ ....
      三目（三元），需要三个操作数或表达式
        条件表达式？表达式1：表达式2;
	先判断条件表达式的值，如果条件为true,则执行表达式1的操作；如果条件为false,则执行表达式2的操作。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 2018/1/22
1.函数——function
 1.什么是函数
   函数，function，也称为方法（method）
   函数是一段预定义好的，并可以被反复执行的代码块
   预定义：提前定义好，并非马上执行
   代码块：可以包含多条可执行的JS语句
   反复执行：允许被多次调用
 2.自定义函数
   1.普通函数的声明和调用
     1.声明函数
       function 函数名称(){
	  //函数体 —— 若干条可执行JS语句
       }
     2.调用函数
       在任意JavaScript合法位置处通过 函数名称(); 对函数进行调用
       想要调用多个函数时，在函数中可以调用多个函数
   2.带参数函数的声明和调用
     1.声明
      function 函数名称(参数列表){
	//函数体
      }
      参数列表：可以声明0或多个参数，多个参数间，使用逗号隔开
      声明函数时，声明的参数，称为“形参”
     2.调用
      函数(参数值列表);
      注意：尽量按照声明函数的格式进行调用，调用函数时，传递的参数值，称为“实参”
   3.带返回值函数的声明和调用
     1.声明
       function 函数名称(){
	  //函数体
	  ...
	  return 值;       
       }
       注意：最多只能返回一个值
     2.调用
       允许使用一个变量去接收函数的返回值
       var result=函数名称();
 3.作用域
   什么是作用域？
   作用域表示的是变量或函数的可访问范围。JS分两种
	1.函数作用域
         只在函数范围内有效
         函数作用域中变量，又称为“局部变量”，只在声明的函数中有效 
	2.全局作用域
	 代码的任何位置都有效
	 全局作用域中的变量，又称为“全局变量”，一经声明，任何位置都能用。
	 注意：1.不在function中声明的变量，为全局变量
	      2.声明变量如果不使用var，无论任何位置，都是全局变量（不推荐）
	      3.全局变量和剧本变量冲突时，优先使用局部变量
	3.声明提前
	 1.什么是声明提前
	   在js程序正式执行之前，function声明的函数，会将所有var声明的变量，都预读到所在作用域的顶部，但赋值还是保留在原位
	4.按值传递
	  1.什么是按值传递
	    原始类型的数据，在做参数传递时，都是按照“值传递”的方式进行传参
	    “值传递”：真正传递参数时，实际上传递的是值的副本（复制出来的值），而不是原始值
	    值传递就是告诉你以后别把原始数据类型的数据拿到函数中去修改（因为始终改变的时副本的值）
        5.函数的作用域
	  分两种：
	  1.局部函数
	    在某个function中声明的函数
	  2.全局函数
            在最外层（<script>中）定义的函数就是全局函数，全局函数一经定义，任何位置都能调用
	6.ECMAScript提供的一组全局函数
	  1.parseInt()
	  2.parseFloat()
	  3.Number()
	  4.isNaN()
	  5.encodeURI()
	    URI:Uniform Resource Identifier(标识符)
	    作用：对统一资源标识符进行编码并且返回编码后的字符串
	    所谓的编码，就是将地址中的多字节编成单字节的文字
	  6.decodeURI()
	    作用:对已编码URI进行解码，并返回解码后的文字
	  7.encodeURIComponent()
	    在encodeURI的基础上，允许对特殊符号进行编码
	  8.decodeURIComponent()
	    在decodeURI的基础上，对特殊符号进行解码
	  9.eval()
	    作用：执行以字符串表示的js代码
 4.递归调用
   递归：在一个函数的内部再次去调用自己
   问题：求阶乘
    function f(n){
	if(n==1){
	  return 1;
	}else{
	  return n*f(n-1);
	}
    }
    效率：在本次调用还未结束时，就开始下次的调用，本次调用就会被挂起，直到所有的调用都完成之后，才会依次返回，调用次数越多，效率越低
2.分支结构
  1.if结构
    语法：
      if(条件){
	语句块;
      }
      条件：为boolean值，如果不是boolean,以下条件值，会当做false，其余都是true
      ex：if(0),if(0.0),if(undefined),if(null),if(NaN)
    if后的{}可以省略，省略后if只控制下面的第一条语句，建议不要省略
  2.if...else
    语法：
      if(条件){
	true执行
      }else{
        false执行
      }
  3.if...else if...else if...else...
    语法：
	if(条件1){
	  true执行1
	}else if(条件2){
	  true执行2
	}else if(条件3){
	  true执行3
	}else{
	  false执行
	}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2018/1/23
1.分支结构 ———— switch...case
  1.作用（使用场合）
    等值判断
  2.语法
    switch(值/表达式){
	case 值1: 
	  语句块1;
	  break;
	case 值2:
	  语句块2;
	  break;
	case 值n:
	  语句块n;
	  break;
	default:
	  语句块;
    }
    注意：switch后的值或表达式，与case后的值进行比较时使用的是 === 判断
  3.switch...case的特殊用法
    执行相同操作时:
       switch(值/表达式){
	case 值1:
	case 值2:
	case 值3:
	   语句块1;
       }
2.循环结构
  1.特点
    1.循环条件：循环的开始和结束
    2.循环操作：要执行的相同或相似的语句
  2.循环—— while
    1.语法
      while(条件){
	//循环体—— 循环操作
	//更新循环条件
      }
  3.循环的流程控制
    1.break
      作用：终止整个循环的运行
    2.continue
      作用：终止本次循环的运行，继续下一次
  4.循环—— do...while
    1.语法
      do{
	循环体
      }while(条件);
    2.执行流程
      1.先执行循环体
      2.再判断循环条件：为真继续执行，为假跳出循环
  5.for循环
    1.语法
     for(表达式1;表达式2;表达式3){
	 循环操作
     }
     表达式1：循环条件的声明
     表达式2：循环条件的判断
     表达式3：更新循环条件
     执行流程：1、执行表达式1 
	      2、判断表达式2
	      3、如果条件为真，则执行循环体，否则退出
	      4、执行完循环体后，执行表达式3
	      5、判断表达式2
    2.for三个表达式特殊用法
      for(表达式1;表达式2;表达式3){}
      1.省略表达式
        三个表达式可以任意省略，分号不能省略，但一定要在循环的内部或外部将表达式补充完整
      2.表达式1和表达式3允许写多个表达式，用逗号分开
  6.循环的嵌套
    1.含义：在一个循环内部，又出现一个循环
      语法：
        for(表达式1;表达式2;表达式3){     //两次表达式不要一样
	  for(表达式1;表达式2;表达式3){
	  
	  }
	}
      外层循环走一次，内层循环走一轮
3.数组
  1.什么是数组
    在一个变量中保存多个数据
    数组是按照线性顺序排列的 —— 线性结构
    数组中：除了第一个元素外，每个元素都有一个直接的“前驱元素”
    数组中：除了最后一个元素外，每个元素都有一个直接的“后继元素”
  2.声明数组
    1.语法
      1.var 数组名=[];
        var names=[];
      2.var 数组名=[元素1,元素2,元素3,元素4,...];
        var names=["Liu","Li","Song","Zhao"];
      3.var 数组名=new Array();
	var names=new Array();
      4.var 数组名=new Array(元素1,元素2,元素3,元素4,...);
    2.数组的使用
      取值和赋值操作都使用 数组名[下标]
      1.为数组元素赋值
        数组名[下标]=值;
	稀疏数组：中间有数据空的
      2.获取数组中的元素
        数组名[下标];
      3.获取数组的长度
        数组长度：数组中元素的个数
	属性：length
	语法：数组名.length
      4.配合循环，遍历数组中的每一个元素
      5.length表示数组中元素的总个数也称为数组的长度
	  数组名[数组名.length]表示元素顺着插入数组
	  length还表示即将插入的元素下标
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2018/1/24
1.关联数组
  以字符串作为下标的数组称为“关联数组”
  以数字作为下标的数组称为“索引数组”
  1.在js中关联数组：
	ex:
      var array=[];
      array["阿斯蒂芬"]="希腊神话人物"
      array["宙斯"]="希腊神话boss"
  2.注意：1.关联数组中，字符串下标的内容不记录到length中
	2.只能通过“字符串”做下标取值
  3.for...in
    遍历任意数组中的字符串下标以及索引下标
    语法：
	for(var 变量 in 数组){
	    //变量：字符串下标 或 索引下标
	    console.log(数组[变量])
	}
2.冒泡排序
  1.什么是冒泡排序
    排序算法之一，将一组数字进行排序，小的数字往前排，大的数字往后排
    ex：var arr=[54,464,76,354,12,1];
    两两比较，小的靠前
    第一轮比较6个数字，比较5次
    第二轮比较5个数字，比较4次
    第三轮比较4个数字，比较3次
    第四轮比较3个数字，比较2次
    第五轮比较2个数字，比较1次
    比较的轮数越多，比较的次数越少
    特点：
    1.n个数字，比较n-1次(循环)
	for(var i=1;i<arr.length;i++){
		for(var j=0;j<arr.length-i;j++){
			//数字位置交换
			//交换两个位置：异或换位^
			//arr[j]和arr[j+1]换位
		}
	}
3.数组的常用方法
  1.toString()
    作用：将一个数组转换为字符串，并返回转换后的结果
    语法：var str=数组名.toString();
  2.join()
    作用：将数组的元素通过指定的字符连接到一起，并且返回连接后的字符串
    语法 var str=数组名.join("字符");
  3.concat()
    作用：拼接两个或更多的数组，并返回拼接后的结果
    语法：var result=数组名.concat(数组1,数组2,数组3...);
    注意：1.concat不会改变原有数组，而是返回拼接后的结果
	  2.除了拼接数组，还可以是普通的数据
  4.slice()
    作用：截取子数组，从指定的数组中，截取几个连续的元素组成一个新的数组
    语法：var arr=数组名.slice(start,[end]);
	  start:从哪个下标处开始截取，取值为正，从前往后算，取值为负，从后往前算
                     0       1      2      3   正
	  var arr=["中国","美国","德国","英国"]
	             -4     -3      -2     -1  负
		end：指定结束位置处的下标（不包含自己），该参数可以省略，如果省略的话，就是从start一直截取到尾
  5.splice()
    作用：允许从指定数组中，删除一部分元素，同时再添加另一部分元素
    语法：数组名.splice(start,count,元素1,元素2...);
          start：指定要添加或删除的起始下标位置
	  count：指定要删除的元素的个数，取值为0表示不删除
	  元素：要增加的新元素，可以多个
    返回值：返回一个由删除元素所组成的数组
    注意：该函数会改变原有数组
  6.reverse()
    作用：讲一个数组反转
    语法：数组名.reverse();
    注意：该函数改变当前数组的内容
  7.sort()
    作用：排序，默认情况下，按照数组元素的Unicode码进行升序排序
    语法：数组名.sort();
    注意：该函数会改变当前数组的内容
    特殊：允许自定义排序函数，从而实现对数字的升序和降序的排序
    1.升序排序
      ex：
      var arr=[123,54,6,57,45];
      function sortAsc(a,b){
	 return a-b;
      }
      arr.sort(sortAsc);
      原理：1.指定排序函数，sortAsc，定义两个参数a,b,表示数组中的相邻的两个数字
            2.将自定义排序函数指定sort()函数，数组中会自动传递数据到sortAsc()中，如果sortAsc的返回值>0的话，则交换两个数字的位置，否则不变

	    使用匿名函数完成升序排序
	    arr.sort(function(a,b){return a-b;})
	    使用匿名函数完成降序排序
	    arr.sort(function(a,b){return b-a;})
4.进出栈操作
  JS是按照标准的“栈式操作”访问数组
  所谓的“栈式操作”的特点就是“后进先出”
  1.push()
    入栈，在栈顶（数组的尾部）添加指定的元素，并返回新数组的长度
  2.pop()
    出栈，删除（栈顶的数据）并返回删除元素
  3.shift()
    删除数组头部的元素并返回删除的元素
  4.unshift()
    在数组的头部元素位置处，增加新的元素
5.二维数组
  1.什么是二维数组
    在一个数组中的元素又是一个数组，也可以称为：数组的数组
  2.二维数组的使用
    var names=[[],[],[]]